{"version":3,"sources":["assets/icons/trash.svg","assets/icons/check.svg","assets/icons/check-checked.svg","assets/icons/add.svg","action/index.ts","reducer/index.ts","reducer/filter.ts","reducer/todos.ts","ui/components/day/day.tsx","ui/components/icons/icons.tsx","ui/components/item-todo/item-todo.tsx","ui/components/list-todo/list-todo.tsx","ui/components/add-todo/add-todo.tsx","ui/components/button/button.tsx","ui/components/filter-button/filter-button.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","nextID","storeLocal","JSON","parse","localStorage","getItem","Todos","length","slice","pop","id","visibilityFilter","RootReducer","combineReducers","Filter","state","action","type","filter","todo","text","isChecked","map","item","Day","date","Date","currentDayOfWeek","getDay","currentDay","getDate","currentMonth","getMonth","className","TrashIcon","src","iconTrash","alt","CheckIcon","iconCheck","CheckedIcon","iconCheckChecked","AddIcon","iconAdd","connect","title","dispatch","toggle","toggleTodo","classNames","onClick","deleteTodo","todos","currentFilter","listTodos","formatNumber","num","taskCreated","taskCompleted","FlexboxGrid","colspan","style","textAlign","List","key","useState","value","setValue","focus","setFocus","useEffect","onSubmit","e","preventDefault","trim","replace","toUpperCase","padding","justify","Item","componentClass","Col","sm","Input","autoFocus","onChange","placeholder","Button","width","color","children","changeView","setVisibilityFilter","size","disabled","FilterButton","align","margin","store","createStore","load","composeWithDevTools","applyMiddleware","save","App","show","setShow","IconButton","icon","circle","Modal","onHide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88cc93af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash.6da0dc5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.431f6650.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-checked.28754f7a.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.9bd8a96e.svg\";","let storeLocal = JSON.parse(localStorage.getItem('redux_localstorage_simple') || '[]');\nlet nextID: number;\n\n(typeof storeLocal.Todos === 'undefined' || storeLocal.Todos.length === 0) ? nextID = 0 : nextID = storeLocal.Todos.slice(-1).pop().id + 1;\n\nexport const addTodo = (text:string) => ({\n  type: 'ADD_TODO',\n  text,\n  id: nextID++\n})\n\nexport const toggleTodo = (id:number) => ({\n  type: 'TOGGLE_TODO',\n  id\n})\n\nexport const deleteTodo = (id:number) => ({\n  type: 'DELETE_TODO',\n  id\n})\n\nexport const setVisibilityFilter = (filter:string) => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter\n})\n\nexport const visibilityFilter = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n  SHOW_COMPLETE: 'SHOW_COMPLETE',\n}","import { combineReducers } from 'redux';\n\nimport { Todos } from './todos';\nimport { Filter } from './filter';\n\nexport const RootReducer = combineReducers({\n  Filter,\n  Todos,\n})","import { visibilityFilter } from 'action';\n\nexport const Filter = (state = visibilityFilter.SHOW_ALL, action: any) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return state = action.filter\n    default:\n      return state;\n  }\n}","type Action = {\n  type: string\n  id: any\n  text?: string\n  isChecked: boolean,\n}\n\ntype State = Array<{\n  id: number\n  todo: string | undefined\n  isChecked: boolean\n}>\n\nexport const Todos = (state: State = [], action: Action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return (\n        state = [\n          ...state,\n          {\n            id: action.id,\n            todo: action.text,\n            isChecked: false\n          }\n        ]\n      )\n    case 'TOGGLE_TODO':\n      return state.map((todo) => (todo.id === action.id) ? {...todo, isChecked: !todo.isChecked} : todo)\n\n    case 'DELETE_TODO':\n      return (\n        state = state.filter(item => item.id !== action.id)\n      )\n\n    default:\n      return state;\n  }\n}","import React from 'react'\nimport './day.scss'\n\nexport const Day = () => {\n  const date = new Date();\n  const dayOfWeek = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n  const monthOfYear = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n\n  const currentDayOfWeek = dayOfWeek[date.getDay()];\n  const currentDay = date.getDate();\n  const currentMonth = monthOfYear[date.getMonth()];\n  \n  return (\n    <h1 className=\"day\">\n      <strong>{currentDayOfWeek}, </strong>\n      {`${currentDay} ${currentMonth}`}\n    </h1>\n  )\n}\n","import React from 'react'\n\nimport iconTrash from 'assets/icons/trash.svg';\nimport iconCheck from 'assets/icons/check.svg';\nimport iconCheckChecked from 'assets/icons/check-checked.svg';\nimport iconAdd from 'assets/icons/add.svg';\n\ninterface IconType {\n  className?: string\n  onClick?: Function\n  white?: boolean\n}\n\nexport const TrashIcon = ({ className }: IconType): React.ReactElement => (\n  <img src={iconTrash} className={className} alt=\"\" />\n);\n\nexport const CheckIcon = ({ className }: IconType): React.ReactElement => (\n  <img src={iconCheck} className={className} alt=\"\" />\n);\n\nexport const CheckedIcon = ({ className }: IconType): React.ReactElement => (\n  <img src={iconCheckChecked} className={className} alt=\"\" />\n);\n\nexport const AddIcon = ({ className }: IconType): React.ReactElement => (\n  <img src={iconAdd} className={className} alt=\"\" />\n);\n","import React from 'react'\nimport classNames from 'classnames';\nimport './item-todo.scss'\nimport {CheckIcon, TrashIcon, CheckedIcon} from 'ui/components/icons/icons';\n\nimport { connect } from 'react-redux'\n\nimport { toggleTodo } from 'action'\nimport { deleteTodo } from 'action'\n\ntype Props = {\n  id: number,\n  title: string,\n  isChecked: boolean,\n  dispatch: any\n}\n\nconst Todo = ( {id, title, isChecked, dispatch}: Props ) =>{\n  const toggle = () => {\n    dispatch(toggleTodo(id));\n  }\n\n  const delTodo = () => {\n    dispatch(deleteTodo(id));\n  }\n\n  return (\n    <div className={classNames('item-todo', {'active': isChecked})}>\n      {isChecked ? <div onClick={toggle}><CheckedIcon className=\"icon-check\" /></div> : <div onClick={toggle}><CheckIcon className=\"icon-check\" /></div>}\n      <p>{title}</p>\n      {isChecked && <div onClick={delTodo}><TrashIcon className=\"icon-trash\" /></div>}\n    </div>\n  )\n}\n\nexport default connect()(Todo);","import React from 'react';\nimport { connect } from 'react-redux'\nimport Todo from 'ui/components/item-todo/item-todo';\nimport { List, FlexboxGrid } from 'rsuite';\nimport FlexboxGridItem from 'rsuite/lib/FlexboxGrid/FlexboxGridItem';\nimport './list-todo.scss';\n\nconst TodoItem = (todos: any) => {\n  let listTodos;\n  if (todos.currentFilter === 'SHOW_ALL') {\n    listTodos = todos.todos;\n  }\n  else if (todos.currentFilter === 'SHOW_ACTIVE') {\n    listTodos = todos.todos.filter((item: any) => !item.isChecked)\n  }\n  else if (todos.currentFilter === 'SHOW_COMPLETE') {\n    listTodos = todos.todos.filter((item: any) => item.isChecked)\n  }\n\n  const formatNumber = (num:number | string) => {\n    if (num < 10) return '0' + num;\n    return num;\n  }\n\n  let taskCreated = formatNumber(todos.todos.length);\n  let taskCompleted = formatNumber(todos.todos.filter((item: any) => item.isChecked).length)  \n  \n  return (\n    <div>\n      <FlexboxGrid className=\"task-info\">\n        <FlexboxGridItem colspan={12}>\n          <span>{taskCreated}</span>\n          <h3>Created tasks</h3>\n        </FlexboxGridItem>\n        <FlexboxGridItem style={{textAlign: `right`}} colspan={12}>\n          <span>{taskCompleted}</span>\n          <h3>Completed tasks</h3>\n        </FlexboxGridItem>  \n      </FlexboxGrid>\n      <List className=\"todo-items\">\n      {listTodos.length === 0 && <p className=\"if-null\">You don't have todos today, Yayy!</p>}\n        {listTodos.length > 0 && listTodos.map((item: any) => < Todo id={item.id} key={item.id} title={item.todo} isChecked={item.isChecked}/> )} \n      </List>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  todos: state.Todos,\n  currentFilter: state.Filter,\n})\n\nexport default connect(mapStateToProps)(TodoItem)","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from 'action'\nimport { Input } from 'rsuite';\nimport { FlexboxGrid, Col } from 'rsuite';\nimport { Button } from 'rsuite';\nimport './add-todo.scss'\n\nexport const InputFilter = ({ dispatch }: any) => {\n  let [value, setValue] = useState('');\n  let [focus, setFocus] = useState(true);\n\n  const onChange = (value: string) => {\n    setValue(value);\n  }\n\n  const onSubmit = (e:any) => {\n    e.preventDefault();\n    if (!value.trim()) {\n      return\n    }\n    else {\n      value = value.replace(/^./, value[0].toUpperCase());\n    }\n    dispatch(addTodo(value));\n    setValue('');\n  }\n\n  useEffect(() => {\n    setFocus(true)\n  }, [])\n\n  return (\n    <form action=\"#\" onSubmit={onSubmit} style={{padding: `20px 0`}}>\n      <FlexboxGrid justify=\"space-between\">\n        <FlexboxGrid.Item colspan={24} className=\"add-todo__item\" componentClass={Col} sm={17}>\n          <Input autoFocus={focus} type=\"text\" value={value} onChange={onChange} placeholder=\"Add Todos here..\" />\n        </FlexboxGrid.Item>\n        <FlexboxGrid.Item colspan={24} className=\"add-todo__item\" componentClass={Col} sm={6}>\n          <Button style={{width: '100%'}} color=\"green\" type=\"submit\">Add to do</Button>\n        </FlexboxGrid.Item>\n      </FlexboxGrid>\n    </form>\n  )\n}\n\nexport default connect()(InputFilter);\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport {setVisibilityFilter} from 'action'\nimport { Button } from 'rsuite';\nimport './button.scss';\n\ntype Props = {\n  filter: any,\n  currentFilter: string,\n  children: any,\n  dispatch: any,\n}\n\nconst ButtonFilter = ({filter, children, dispatch, currentFilter}: Props) => {\n  const changeView = () => {\n    dispatch(setVisibilityFilter(filter))\n  }\n  \n  return (\n    <div>\n      {filter === currentFilter && <Button className=\"button-filter\" size=\"sm\" color=\"green\" onClick={changeView} disabled > {children} </Button>}\n      {filter !== currentFilter && <Button className=\"button-filter\" size=\"sm\" color=\"green\" onClick={changeView} >{children}</Button>}\n    </div>\n    \n  )\n}\n\nconst mapStateToProps = (state:any) => ({\n  currentFilter: state.Filter\n})\n\nexport default connect(mapStateToProps)(ButtonFilter)\n","import React from 'react'\nimport ButtonFilter from 'ui/components/button/button';\nimport { visibilityFilter } from 'action'\nimport { FlexboxGrid } from 'rsuite';\nimport './filter-button.scss'\n\nexport const FilterButton = () => {\n  return (\n    <FlexboxGrid className=\"filter-button\" align=\"middle\" justify=\"space-between\" style={{margin: `20px 0`}}>\n      <FlexboxGrid.Item>\n      <span>Show</span>\n      </FlexboxGrid.Item>\n      <FlexboxGrid.Item>\n        <FlexboxGrid>\n          <ButtonFilter filter={visibilityFilter.SHOW_ALL} >All</ButtonFilter>\n          <ButtonFilter filter={visibilityFilter.SHOW_ACTIVE} >Active</ButtonFilter>\n          <ButtonFilter filter={visibilityFilter.SHOW_COMPLETE} >Complete</ButtonFilter>\n        </FlexboxGrid>\n      </FlexboxGrid.Item>\n    </FlexboxGrid>\n  )\n}\n\n","import React, { useState } from 'react';\nimport './index.css';\nimport './App.scss';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootReducer } from 'reducer';\nimport { IconButton } from 'rsuite';\nimport { Modal } from 'rsuite';\n\n\nimport { Day } from 'ui/components/day/day';\nimport ListTodo from 'ui/components/list-todo/list-todo';\nimport AddTodo from 'ui/components/add-todo/add-todo';\nimport { FilterButton } from 'ui/components/filter-button/filter-button';\n\nimport { AddIcon } from 'ui/components/icons/icons';\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nimport { save, load } from \"redux-localstorage-simple\"\n\nconst store = createStore(\n  RootReducer,\n  load(),\n  composeWithDevTools(applyMiddleware(save()))  \n)\n\nconst App = () => {\n  const [show, setShow] = useState(false);\n\n  const close = () => {\n    setShow(false);\n  }\n  const open = () => {\n    setShow(true);\n  }\n  \n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <IconButton onClick={open} color=\"green\" className=\"plus-icon\" icon={<AddIcon />} circle/>\n        <main>\n          <Day />\n          <Modal size=\"xs\" className=\"form-popup\" show={show} onHide={close}>\n            <AddTodo />\n          </Modal>\n          <ListTodo />\n        </main>\n        <FilterButton />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}